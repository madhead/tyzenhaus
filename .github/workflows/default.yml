name: Default

on:
  push:
    branches-ignore:
      - master
      - crowdin

jobs:
  check-gradle-version:
    name: Check Gradle version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: madhead/check-gradle-version@v1
    continue-on-error: true

  build-policies:
    name: Build policies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - uses: gradle/actions/wrapper-validation@v3
      - uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/master' }}
      - run: ./gradlew :policies:privacy
      - run: tar -cvf policies.tar policies/build
      - uses: actions/upload-artifact@v4
        with:
          name: policies
          path: |
            policies.tar

  unit-test:
    name: Unit test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - uses: gradle/actions/wrapper-validation@v3
      - uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/master' }}
      - run: ./gradlew check jacocoTestReport
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          retention-days: 1
          path: |
            **/build/reports
            **/build/test-results
            **/build/jacoco

  db-test:
    name: DB test
    runs-on: ubuntu-latest
    env:
      POSTGRES_HOST: localhost
      POSTGRES_USER: tyzenhaus
      POSTGRES_PASSWORD: tyzenhaus
      POSTGRES_PORT: 5432
      POSTGRES_DB: tyzenhaus
    services:
      postgres:
        image: postgres:14
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{env.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{env.POSTGRES_PASSWORD}}
          POSTGRES_DB: ${{env.POSTGRES_DB}}
          POSTGRES_HOST_AUTH_METHOD: trust
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - uses: gradle/actions/wrapper-validation@v3
      - uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/master' }}
      - run: ./gradlew :repository:postgresql:liquibaseUpdate
        env:
          DATABASE_URL: postgres://${{env.POSTGRES_USER}}:${{env.POSTGRES_PASSWORD}}@${{env.POSTGRES_HOST}}:${{env.POSTGRES_PORT}}/${{env.POSTGRES_DB}}
      - run: psql -h ${{env.POSTGRES_HOST}} -U ${{env.POSTGRES_USER}} -d ${{env.POSTGRES_DB}} <repository/postgresql/src/test/sql/seed.sql
      - run: ./gradlew dbTest jacocoDbTestReport
        env:
          DATABASE_URL: postgres://${{env.POSTGRES_USER}}:${{env.POSTGRES_PASSWORD}}@${{env.POSTGRES_HOST}}:${{env.POSTGRES_PORT}}/${{env.POSTGRES_DB}}
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: db-test-results
          retention-days: 1
          path: |
            **/build/reports
            **/build/test-results
            **/build/jacoco

  mini-app-test:
    name: Mini App test
    runs-on: ubuntu-latest
    needs:
      - build-policies
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: 'mini-app/.nvmrc'
      - run: yarn install
        working-directory: mini-app
      - uses: actions/download-artifact@v4
        with:
          name: policies
      - run: |
          tar xvf policies.tar
      - run: yarn run build
        working-directory: mini-app

  test-publish:
    name: Publish test results
    runs-on: ubuntu-latest
    needs:
      - unit-test
      - db-test
      - mini-app-test
    if: always()
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: unit-test-results
      - uses: actions/download-artifact@v4
        with:
          name: db-test-results
      - uses: mikepenz/action-junit-report@v3
        with:
          report_paths: '**/test-results/**/TEST-*.xml'

  codecov:
    name: CodeCov
    runs-on: ubuntu-latest
    needs:
      - unit-test
      - db-test
      - mini-app-test
    if: always()
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: unit-test-results
      - uses: actions/download-artifact@v4
        with:
          name: db-test-results
      - run: bash <(curl -s https://codecov.io/bash)
